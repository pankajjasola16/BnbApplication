package com.airbnb.service;

import com.airbnb.entity.Booking;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.util.stream.Stream;


// we will trigger this PDF Service Creation from --> BookingController.java
// PDF is getting stored in --> c DRIVE --> BNB BOOKING folder

@Service
public class PDFService {
    // How to supply file to --> EmailService.java --> so create an object of email service:
    private EmailService emailService;

    public PDFService(EmailService emailService) {
        this.emailService = emailService;
    }

    // But here file name is in the coding  iTextTable  so how to change that --> so supply
    // Booking object: --> and then in BookingController --> supply savedBooking inside -->
    // pdfService.generatePdf(savedBooking); --> PDF generation
    public void generatePdf(Booking booking){
        try {
            Document document = new Document();
            // below give the pdf path
            PdfWriter.getInstance(document, new FileOutputStream("C://bnb_bookings//"+booking.getId()+"_booking_confirmation.pdf"));

            // Above line initializes a PdfWriter instance that writes the PDF content generated by the
            // document object to the specified file path (C://bnb_bookings//[booking_id]_booking_confirmation.pdf).

            // "+booking.getId()+" --> everytime booking happens --> the booking ids are different --> the
            // booking id can never be same

            document.open();

            PdfPTable table = new PdfPTable(3);
            addTableHeader(table);
            // below --> addRows(table); -> in row of PDF --> SUPPLY Booking object and call
            // the method --> addRows
            addRows(table, booking);
//        addCustomRows(table); --> i do not want this

            // below add(table) method will have checked exception --> so keep the code inside
            // try catch --> because all file handling concept throw --> checked exception
            document.add(table);
            document.close();
            // Another method to call email --> from here we will call email services
            // here we will supply --> String To, String subject, String text  and String attachmentPath
            emailService.sendEmailWithAttachment(
                    booking.getEmail(),
                    "Booking Confirmation. Your booking id is "+booking.getId(),
                    "test",
                    new File("C://bnb_bookings//"+booking.getId()+"_booking_confirmation.pdf")
            );

        }catch(Exception e){
            e.printStackTrace();
        }
    }

    // Now we’ll create a new table with three columns and three rows. We’ll treat the first
    // row as a table header with a changed background color and border width:
    private void addTableHeader(PdfPTable table) {
        // here change the header --> whatever  you want in --> PDF
//        Stream.of("column header 1", "column header 2", "column header 3")
        Stream.of("Guest Name", "Hotel Name", "City")
                .forEach(columnTitle -> {
                    PdfPCell header = new PdfPCell();
                    header.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    header.setBorderWidth(2);
                    header.setPhrase(new Phrase(columnTitle));
                    table.addCell(header);
                });
    }

    // The second row will consist of three cells with just text, and no extra formatting:
    // here in row we will supply the value from booking object --> Booking booking
    private void addRows(PdfPTable table, Booking booking) {
        table.addCell(booking.getGuestName());
        table.addCell(booking.getProperty().getName());
        table.addCell(booking.getProperty().getCity().getName());

        // booking.getProperty() --> here i am first getting the property object address and
        // then from property address --> get Name -> because here i am supplying --> booking object
        // and in booking table --> we have property id as foreign key
    }

}

//private void addRows(PdfPTable table) {
//    table.addCell("row 1, col 1");
//    table.addCell("row 1, col 2");
//    table.addCell("row 1, col 3");
//}


                            //document.open()

//        When working with the iText library to create a PDF, document.open():

//  1:      Opens the Document object for writing content.
//  2:      Allows you to start adding content (like text, tables, images, etc.) to the PDF document.
//  3:      Prepares the document to accept elements such as paragraphs, headers, footers, and other PDF structures.

//        When to use it?

//        You call document.open() after creating a Document instance but before adding content to it.
//        For example, when writing a PDF, you typically follow these steps:

//   1:     Create a Document object.
//   2:     Open the document with document.open().
//   3:     Add content to the document.
//   4:     Close the document with document.close() to finalize and save it.

//        Example:

//public class PDFExample {
//    public static void main(String[] args) {
//        try {
//            Document document = new Document();
//            PdfWriter.getInstance(document, new FileOutputStream("example.pdf"));
//            document.open(); // Opens the document for writing
//            document.add(new Paragraph("Hello, this is a sample PDF using iText."));
//            document.close(); // Finalizes and saves the PDF
//            System.out.println("PDF created successfully.");
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
//}

//Key Notes:

// If you try to add content to the document without calling document.open(), it will throw an exception.
//        After calling document.open(), the document becomes editable.
//        After you finish adding content, you must call document.close() to finalize the document and
//        write it to the output stream.


