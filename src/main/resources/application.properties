#spring.application.name=bnb
#
## Database Configuration
#spring.datasource.url=jdbc:mysql://localhost:3306/bnbdb
#spring.datasource.username=root
##spring.datasource.password=test
#
##  Hibernate Setting
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
#
#jwt.algorithm.key=gdhjgsad-ashdjkashdjkh-ashdjshdjhsa
#jwt.issuer=pankaj
#jwt.expiry.duration=86400000
#
##  I have to read these three things in my code in ? JWTService.java
#
## we can also write --> jwt.key=gdhjgsad-ashdjkashdjkh-ashdjshdjhsa
## no need to write --> jwt.algorithm.key
## so when the token generate --> i need to protect that Token with the Signature
## so i have given random signature --> gdhjgsad-ashdjkashdjkh-ashdjshdjhsa
## so that nobody can find out signature easily
## if people will get this signature --> then that will cause an issue
#
##  jwt.issuer=pankaj  --> who has issued this Token that name will come
#
## jwt.expiry.duration=86400000  --> time in millisecond - so the token will be valid for
## 86400000  millisecond
#
## spring.jpa.show-sql=true --> it means whatever HQL query you generate you are able to
## see it in console
#
## Dialect --> purpose of dialect --> whenever you write some sql queries (sql queries
## are not same for all database) the way we will write sql query the syntax will varry
## for the database for ex --> for Oracle sql query will be slightly different, post grace
## different, ysql different
## so by giving this dialect you are actually telling spring boot generate the query which
## is suitable for MySQL , even if you do not do that --> auto detection do that But by
## giving dialect you telling clearly that you generate the HQL Query that is exactly
## matching to MySQL database
#
## below details are because --> I am connecting the local code with --> AWS
## But when i deploy the project --> then project will be in --> AWS --> S3 Services in
## AWS --> then you do not require this part of code given below --> right now because we are
## in development environment --> we will have to do this But when your project and your -->
## S3 Cloud storage --> both are in one place --> then you need not give this
## generate your keys from AWS, save it somewhere and then use it below
## region=eu-north-1 --> region where bucket is created
#
## EMAIL
#
## Mail server host (e.g., Gmail SMTP server)
#spring.mail.host=smtp.gmail.com
#spring.mail.port=587
#spring.mail.username=pankajjasola16@gmail.com
#spring.mail.password=ydhvwrbgbcdttggh
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=true
#
##spring.mail.protocol=smtp
##spring.mail.properties.mail.smtp.connectiontimeout=5000
##spring.mail.properties.mail.smtp.timeout=5000
##spring.mail.properties.mail.smtp.writetimeout=5000
#
#
## SMS
#
## Twilio Configuration for SMS Services
#twilio.account.sid=AC9820d3b7c6daff9153bafd1266491ec8
#twilio.auth.token=3b6a0ce8055e691e19f7a6b298f3d041
#twilio.phone.number=+12563306696
#
## Twilio WhatsApp Configuration
#twilio.whatsapp.phone.number=+12315382219  # Use a unique key name for WhatsApp
#
#
## LOGGING
#
## generate logger file
#
## Set Spring Security logs to WARN level (less verbose)
##logging.level.org.springframework.security=WARN
#
## Set the logging level for specific package
##logging.level.root=INFO
#logging.level.com.airbnb.app=DEBUG
#
## Specify the full file name and path for logs
#logging.file.name=logs/airbnb.log
#
## Optional: Limit the size of individual log files
#logging.file.max-size=10MB
#
## Optional: Total size cap for log rotation
#logging.file.total-size-cap=50MB
#
## Log patterns for better formatting
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
#logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
#
#
#
##S3
#
#accessKey=AKIAWPPO6LGZMJASAUXP
#secretKey= 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
#region=eu-north-1
#cloud.aws.region.static=eu-north-1
#cloud.aws.region.auto=false
#cloud.aws.stack.audo=false
#spring.main.allow-bean-definition-overriding=true
#logging.level.com.amazonaws.util.EC2MetadataUtils=error
#logging.level.com.amazonaws.internal.InstanceMetadataServiceResourceFetcher=error
#
#
## access key --> this will act like login
## i am giving the above code because i am connecting the local code with AWS But when
## i deploy the project --> project is in AWS --> s3 servics are also in AWS --> THEN
## We do not require the above piece of code --> becuase project itself in the AWS
## right now we are in development environment --> we will have to write above code to
## connect with AWS
## But when your project and --> your s3 cloud storage --> both are in one place --> you need not
## give above code
#
## region ? where the bucket has been created --> Europe (Stockholm) eu-north-1
#
## Dialect --> It writes HQL Query --> which is similar to SQL --> Hibernate Query language
## Who is generating HQL --> Hibernate
## What kind of HQL it has to generate --> depends on database
## Which database it has to generate which HQL --> Dialect information
